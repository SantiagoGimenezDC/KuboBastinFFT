
/*
void Kubo_solver_filtered::filter( int m, type* new_vec, type** poly_buffer, type* tmp, type* tmp_velOp, int s, int vel_op ){

  
  int M         = parameters_.M_,
      M_ext     = filter_.parameters().M_ext_,
      num_parts = parameters_.num_parts_,
      SEC_SIZE  = parameters_.SECTION_SIZE_ ;

  
  bool cyclic = true;
  
  int k_dis     = filter_.parameters().k_dis_,
      L         = filter_.parameters().L_,
      Np        = (L-1)/2,
      decRate   = filter_.parameters().decRate_;

  
  r_type KB_window[L];
 
  for(int i=0; i < L; i++)
    KB_window[i] = filter_.KB_window()[i];


  
  
  type factor = ( 2 - ( m == 0 ) ) * kernel_->term(m,M) * std::polar( 1.0,  M_PI * m * (  - 2 * k_dis + initial_disp_ ) / M_ext );

  
  if( vel_op == 1 ){
    device_.vel_op( tmp_velOp, new_vec );
    device_.traceover(tmp, tmp_velOp, s, num_parts);
  }
  else
    device_.traceover(tmp, new_vec, s, num_parts);


      
  for(int dist = -Np; dist <= Np;  dist++){
    int i = ( m + dist );  

    if( i >= 0 && i < M - 1 && i % decRate == 0 ){
      int i_dec = i / decRate;  
      plus_eq( poly_buffer[ i_dec ], tmp,  factor * KB_window[ Np + dist  ], SEC_SIZE );
    }
	
    if( cyclic && i < 0 && ( M - 1 + ( i + 1 )  ) % decRate == 0 )
      plus_eq( poly_buffer[ ( M - 1 + ( i + 1 ) ) / decRate ], tmp,  factor * KB_window[ Np + dist ], SEC_SIZE );
	
	
    if( cyclic && i > M - 1 && ( ( i - 1 ) - ( M - 1 )  ) % decRate == 0 )
      plus_eq( poly_buffer[ ( i - M + 1 ) / decRate ], tmp,  factor * KB_window[ Np + dist  ], SEC_SIZE );
  }
  
};



void Kubo_solver_filtered::filtered_polynomial_cycle_direct_2(type** poly_buffer, type rand_vec[], r_type damp_op[], r_type dis_vec[], int s, int vel_op){
  
  int M         = parameters_.M_,
      DIM       = device_.parameters().DIM_,
      SEC_SIZE  = parameters_.SECTION_SIZE_ ;


    
  type *vec      = new type [ DIM ],
       *p_vec    = new type [ DIM ],
       *pp_vec   = new type [ DIM ],
       *tmp      = new type [ SEC_SIZE ];

  type *tmp_velOp = new type [ DIM ];
  

  
#pragma omp parallel for
  for(int l=0;l<DIM;l++){
    vec[l] = 0;
    p_vec[l] = 0;
    pp_vec[l] = 0;

    tmp_velOp[l] = 0;

    if( l < SEC_SIZE )
      tmp[l] = 0;
  }


  
  if( vel_op == 1 )
    device_.vel_op( pp_vec, rand_vec );  
  else
#pragma omp parallel for
    for(int l = 0; l < DIM; l++)
      pp_vec[l] = - rand_vec[l]; //This minus sign is due to the CONJUGATION of applying both velocity operators to the KET side!!!!

  
 
  filter( 0, pp_vec, poly_buffer, tmp, tmp_velOp, s, vel_op );  


  
  device_.H_ket ( p_vec, pp_vec );
  filter( 1, p_vec, poly_buffer, tmp, tmp_velOp, s, vel_op ); 


  for( int m=2; m<M; m++ ){

    device_.update_cheb( vec, p_vec, pp_vec );

    filter( m, vec, poly_buffer, tmp, tmp_velOp, s, vel_op );
  }
      
    delete []vec;
    delete []p_vec;
    delete []pp_vec;
    delete []tmp;
    delete []tmp_velOp;
  
}

*/



/*
void Kubo_solver_filtered::filtered_polynomial_cycle_direct(type** poly_buffer, type rand_vec[], r_type damp_op[], r_type dis_vec[], int s, int vel_op){
  
  int M         = parameters_.M_,
      M_ext     = filter_.parameters().M_ext_,
      DIM       = device_.parameters().DIM_,
      num_parts = parameters_.num_parts_,
      SEC_SIZE  = parameters_.SECTION_SIZE_ ;


  
  int k_dis     = filter_.parameters().k_dis_,
      L         = filter_.parameters().L_,
      Np        = (L-1)/2,
      decRate   = filter_.parameters().decRate_,  
      M_dec     = filter_.M_dec(),
      Np_dec    = Np / decRate;


  

  
  r_type KB_window[L];

  bool cyclic = true;

  
  
  for(int i=0; i < L; i++)
    KB_window[i] = filter_.KB_window()[i];


  
  type *vec_f    = new type [ DIM ],
       *p_vec_f  = new type [ DIM ],
       *pp_vec_f = new type [ DIM ],
       *vec      = new type [ DIM ],
       *p_vec    = new type [ DIM ],
       *pp_vec   = new type [ DIM ],
       *tmp      = new type [ SEC_SIZE ];

  type *tmp_velOp = new type [ DIM ];
  
v
  
#pragma omp parallel for
  for(int l=0;l<DIM;l++){
    vec[l] = 0;
    p_vec[l] = 0;
    pp_vec[l] = 0;

    vec_f[l] = 0; 
    p_vec_f[l] = 0;
    pp_vec_f[l] = 0;

    tmp_velOp[l] = 0;

    if( l < SEC_SIZE )
      tmp[l] = 0;
  }


  
  if( vel_op == 1 )
    device_.vel_op( pp_vec, rand_vec );  
  else
#pragma omp parallel for
    for(int l = 0; l < DIM; l++)
      pp_vec[l] = - rand_vec[l]; //This minus sign is due to the CONJUGATION of applying both velocity operators to the KET side!!!!

  
  
  //=================================KPM Step 0======================================//

  if( vel_op == 1 ){
    device_.vel_op( tmp_velOp, pp_vec );
    device_.traceover(tmp, tmp_velOp, s, num_parts);
  }
  else
    device_.traceover(tmp, pp_vec, s, num_parts);


  
  //Filter boundary conditions
  for(int  i_dec = 0; i_dec <= Np_dec ; i_dec++ ){
    plus_eq( poly_buffer[ i_dec ], tmp, KB_window[ Np - i_dec * decRate ], SEC_SIZE );

    int dist_cyclic = ( i_dec * decRate  + ( M - 1 ) % decRate + 1 );
    if(cyclic && dist_cyclic <= Np )
      plus_eq( poly_buffer[  M_dec - 1 - i_dec ], tmp,  KB_window[ Np + dist_cyclic ], SEC_SIZE );
  }
  


  

  
  //=================================KPM Step 1======================================//     
    
  device_.H_ket ( p_vec, pp_vec, damp_op, dis_vec);
  
    
  type factor = std::polar(1.0,  M_PI * 1 * (  - 2 * k_dis + initial_disp_ ) / M_ext );


  
  if( ( Np + 1 ) % decRate == 0){
    int i = Np + 1;  
    int i_dec = i/decRate;  
    plus_eq( poly_buffer[ i_dec ], tmp,  factor * KB_window[ Np + Np  ], SEC_SIZE );
  }

  
  //Filter boundary conditions
  for(int i_dec = 0; i_dec <= Np_dec;  i_dec++){
    plus_eq( poly_buffer[ i_dec ], tmp, 2 * factor * KB_window[Np + 1 - i_dec * decRate ], SEC_SIZE );

    
    int dist_cyclic = ( 1 + i_dec * decRate  + ( M - 1 ) % decRate + 1 );
    if( cyclic && dist_cyclic )
      plus_eq( poly_buffer[ M_dec - 1 - i_dec ], tmp, 2 * factor * KB_window[ Np + dist_cyclic ], SEC_SIZE );
  }



  

  
  //=================================KPM Steps 2 and so on===============================//

    for( int m=2; m<M; m++ ){

      device_.update_cheb( vec, p_vec, pp_vec, damp_op, dis_vec);

      factor = 2 * std::polar(1.0,  M_PI * m * (  - 2 * k_dis + initial_disp_) / M_ext );

      if( vel_op == 1 ){
        device_.vel_op( tmp_velOp, vec );
	device_.traceover(tmp, tmp_velOp, s, num_parts);
      }
      else
	device_.traceover(tmp, vec, s, num_parts);

	
      //===================================Filter Boundary conditions====================// 
      if( m < L ){
	for(int i_dec = 0; i_dec <= Np_dec ;  i_dec++ ){
          if( m - i_dec * decRate   <= Np )
	    plus_eq( poly_buffer[ i_dec ], tmp,  factor * KB_window[Np + m - i_dec * decRate ], SEC_SIZE );

	  
	  int dist_cyclic = ( m + i_dec * decRate  + ( M - 1 ) % decRate + 1 );
	  if( cyclic && dist_cyclic  <= Np )
	    plus_eq( poly_buffer[ M_dec - 1 - i_dec ], tmp, factor * KB_window[ Np + dist_cyclic ], SEC_SIZE );
	  
	}
      }
      else if( M - m - 1 < L ){        
	for(int i_dec = 0; i_dec < Np_dec;  i_dec++){
	  int dist = ( i_dec * decRate + ( M - 1 ) % decRate ) - ( M - 1 - m ) ;  
          if(   std::abs(dist) <= Np  )
	    plus_eq( poly_buffer[ M_dec - 1 - i_dec ], tmp,  factor * KB_window[ Np + dist  ], SEC_SIZE );
	  
	  if( cyclic && (  ( M - 1 - m ) + i_dec * decRate + 1 ) <= Np )
	    plus_eq( poly_buffer[ i_dec ], tmp,  factor * KB_window[ Np - ( ( M - 1 - m ) + i_dec * decRate + 1 )  ], SEC_SIZE );
v	  
	}
      }


      
      
      for(int dist = -Np; dist <= Np;  dist++){
        int i = ( m + dist );  
	if( i % decRate == 0 && i > Np && i < M-1-Np ){
	    int i_dec = i/decRate;  
	    plus_eq( poly_buffer[ i_dec ], tmp,  factor * KB_window[ Np + dist  ], SEC_SIZE );
	}
      }
      
      //==========================================================================//
      
    }

    for(int i=0;i<M;i++)
      if(i%decRate==0)
	std::cout<<i<<std::endl;
    
    delete []vec_f;
    delete []p_vec_f;
    delete []pp_vec_f;
    delete []vec;
    delete []p_vec;
    delete []pp_vec;
    delete []tmp;
    delete []tmp_velOp;
  
}



*/

  /*
  if(nump%2==0)
    for( int k = 0; k < nump / 2; k++ ){
      rearranged[ k ]   = original[ nump/2 + k  ]; 
      rearranged[ nump/2 + k ] = original[ k ]; 
    }
  else{
    rearranged[ nump/2 + 1 ] = original[ nump/2 + 1 ]; 
    for( int k = 0; k < nump / 2; k++ ){
      rearranged[ k ]   = original[ nump/2 + k  ]; 
      rearranged[ nump/2 + k + 1] = original[ k ]; 
    }
    }*/
  /*  for( int k=0; k < nump / 2; k++ ){
    r_type tmp = rearranged[ k ]; 
    rearranged[ k ]   = rearranged[ nump-k-1 ];
    rearranged[ nump-k-1 ] = tmp;    
    } */ 
