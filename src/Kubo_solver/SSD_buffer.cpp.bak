  
  
void write_binary(
		  const std::string &filename,
		  const int M,
		  const int D,
                   type **matrix)
{

  auto write_start = std::chrono::steady_clock::now();
  FILE* create = fopen( filename.c_str(), "wb");
  fclose(create);
  
  for(int m=0;m<M;m++){
    FILE* out = fopen( filename.c_str(), "a+");
    fwrite( matrix[m], 1, D*sizeof(type), out );
    fclose(out);
  }
  auto write_end = std::chrono::steady_clock::now();

  Station2(std::chrono::duration_cast<std::chrono::microseconds>(write_end - write_start).count()/1000, "           SSD writing time:           ");
}
  

void read_binary(
		  const std::string &filename,
		  const int M,
		  const int D,
                   type **matrix)
{

  auto write_start = std::chrono::steady_clock::now();
  for(int m=0;m<M;m++){
    FILE* in = fopen(filename.c_str(), "rb");
    fseek(in, m*D*sizeof(type), SEEK_CUR);
    fread( matrix[m], 1, D*sizeof(type), in );
    fclose(in);
  }
  auto write_end = std::chrono::steady_clock::now();
  
  Station2(std::chrono::duration_cast<std::chrono::microseconds>(write_end - write_start).count()/1000, "           SSD reading time:           ");

}




void Kubo_solver_SSD::transfer_to_buffer(const std::string &side, type vec[]){

  int SUBDIM = device_.parameters().SUBDIM_;
  std::string filename=parameters_.run_dir_+"/buffer/"+side+"_";
  
  for(int n=0;n<num_buffers_;n++){
    FILE* out = fopen( (filename+std::to_string(n)).c_str(), "a+");
    fwrite( &vec[n*SUBDIM/num_buffers_], 1, SUBDIM*sizeof(type)/num_buffers_, out );
    fclose(out);
  }
}

void Kubo_solver_SSD::create_buffers(){
  
  std::string filename=parameters_.run_dir_+"/buffer/";

  for(int n=0;n<num_buffers_;n++){
    FILE* create_bra = fopen( (filename+"bras_"+std::to_string(n)).c_str(), "wb");
    fclose(create_bra);

    
    FILE* create_ket = fopen( (filename+"kets_"+std::to_string(n)).c_str(), "wb");
    fclose(create_ket);
  }
}

void Kubo_solver_SSD::transfer_to_SSD(const std::string &side, type vec[]){

  int SEC_SIZE = parameters_.SECTION_SIZE_,
      M = parameters_.M_;

  std::string filename=parameters_.run_dir_+"/buffer/"+side+"_";

  for(int n=0;n<num_buffers_;n++){
     FILE* out = fopen( (filename+std::to_string(n)).c_str(), "a+");

     for(int m=0; m<num_buffers_;m++)
       fwrite( &vec[ (m/M) * SEC_SIZE + n * SEC_SIZE / num_buffers_ ], 1, SEC_SIZE*sizeof(type)/num_buffers_, out );
    
    fclose(out);
  }
}
